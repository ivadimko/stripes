(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,function(e,t,n){"use strict";var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();n(7);var s=f(n(0)),r=f(n(2)),o=n(6),a=v(n(3)),c=v(n(4));function v(e){return e&&e.__esModule?e:{default:e}}function f(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}var g=n(5)(s);new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=new s.Scene,this.renderer=new s.WebGLRenderer,this.vw=window.innerWidth,this.vh=window.innerHeight,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.vw,this.vh),this.scene.background=new s.Color(5308416),this.container=document.querySelector(t),this.container.appendChild(this.renderer.domElement),this.camera=new s.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.001,1e3),this.camera.position.set(0,0,7.5),this.camera.lookAt(0,0,0),this.time=0,this.group=new s.Group,this.scene.add(this.group),this.controls=new g(this.camera,this.renderer.domElement),this.settings=null,this.resize=this.resize.bind(this),this.animate=this.animate.bind(this),this.setupSettings(),this.setupResize(),this.resize(),this.addObjects(),this.postprocessing(),this.animate()}return i(e,[{key:"setupSettings",value:function(){var e=this;this.settings={speed:2,length:1,wireframe:!1,postprocessing:!0},this.gui=new r.GUI,this.gui.add(this.settings,"wireframe").onChange(function(t){e.material.wireframe=t}),this.gui.add(this.settings,"speed",1,10),this.gui.add(this.settings,"length",0,1),this.gui.add(this.settings,"postprocessing")}},{key:"setupResize",value:function(){window.addEventListener("resize",this.resize)}},{key:"resize",value:function(){this.vw=window.innerWidth,this.vh=window.innerHeight,this.renderer.setSize(this.vw,this.vh),this.camera.aspect=this.vw/this.vh,this.camera.updateProjectionMatrix()}},{key:"addObjects",value:function(){this.material=new s.ShaderMaterial({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:s.DoubleSide,uniforms:{time:{type:"f",value:0},speed:{type:"f",value:this.settings.speed},length:{type:"f",value:this.settings.length}},wireframe:this.settings.wireframe,vertexShader:c.default,fragmentShader:a.default}),this.geometry=new s.PlaneBufferGeometry(10,1,64,64),this.instanceGeometry=new s.InstancedBufferGeometry;var e=this.geometry.attributes.position.clone();this.instanceGeometry.addAttribute("position",e),this.instanceGeometry.attributes.uv=this.geometry.attributes.uv,this.instanceGeometry.attributes.normal=this.geometry.attributes.normal,this.instanceGeometry.index=this.geometry.index;for(var t=[],n=[],i=0;i<50;i+=1)t.push(0,3*Math.cos(i/50*Math.PI*2),3*Math.sin(i/50*Math.PI*2)),n.push(Math.random());this.instanceGeometry.addAttribute("instancePosition",new s.InstancedBufferAttribute(new Float32Array(t),3)),this.instanceGeometry.addAttribute("instanceOffset",new s.InstancedBufferAttribute(new Float32Array(n),1)),this.instanceMesh=new s.Mesh(this.instanceGeometry,this.material),this.group.add(this.instanceMesh),this.group.rotation.y=Math.PI/2}},{key:"postprocessing",value:function(){this.composer=new o.EffectComposer(this.renderer),this.composer.setSize(this.vw,this.vh);var e=new o.RenderPass(this.scene,this.camera);e.enabled=!0,this.composer.addPass(e),e.renderToScreen=!1;var t=new o.BloomEffect,n=new o.EffectPass(this.camera,t);n.renderToScreen=!0,this.composer.addPass(n)}},{key:"animate",value:function(){this.time+=.001,this.material.uniforms.time.value=this.time,this.material.uniforms.speed.value=this.settings.speed,this.material.uniforms.length.value=this.settings.length,requestAnimationFrame(this.animate),this.render()}},{key:"render",value:function(){this.settings.postprocessing?this.composer.render():this.renderer.render(this.scene,this.camera)}}]),e}())("#container")},,function(e,t){e.exports="uniform float time;\nuniform float length;\nuniform float progress;\n\nvarying vec2 vUv;\nvarying float vOffset;\n\nvoid main()\t{\n\n  float o = fract(time);\n  float offset = vUv.x + vOffset;\n\n\tif( abs(offset - o)>length && abs(offset - o - 1.)>length && abs(offset - o + 1.)>length )  {\n\t\tdiscard;\n\t}\n\tvec3 color = vec3(0.317, 0., 0.);\n\tfloat m = 1. - abs(2. * (vUv.x - 0.5));\n\n\tvec3 c = mix(color, vec3(1., 1., 1.), m * m * m * m);\n\n\tgl_FragColor = vec4(c,1.);\n}\n"},function(e,t){e.exports="uniform float time;\nuniform float speed;\n\nattribute vec3 instancePosition;\nattribute float instanceOffset;\n\nvarying vec2 vUv;\nvarying float vOffset;\n\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P);\n  vec3 Pi1 = Pi0 + vec3(1.0);\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P);\n  vec3 Pf1 = Pf0 - vec3(1.0);\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\nfloat perlin(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvoid main() {\n  vUv = uv;\n\n  vOffset = instanceOffset;\n  vec3 pos = position + instancePosition;\n\n  pos.x += sin(pos.y * 5.) / 2.;\n\n  pos.y += perlin(vec3(pos.z * speed + time, position.x + time * 2. * speed, speed * time * 4. + position.x));\n  pos.z += perlin(vec3(pos.z * speed + time, pos.y + time * 2. * speed, speed * time * 4. + position.x));\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n}\n"},,,function(e,t){}],[[1,1,2]]]);